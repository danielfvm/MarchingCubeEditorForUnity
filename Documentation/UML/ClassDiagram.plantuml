@startuml
skinparam classAttributeIconSize 0

class MarchingCubesController <<MonoBehaviour>> {
    - List<MarchingCubesView> chunkViews
    - MarchingCubesModel model
    - Vector3Int chunkSize
    - GameObject chunkPrefab
    + bool showGridOutline
    + int GridResolutionX
    + int GridResolutionY
    + int GridResolutionZ
    + Initialize(resolutionX: int, resolutionY: int, resolutionZ: int, setEmpty: bool) : void
    + bool IsInitialized { get; }
    + ModifyShape(shape: EditShape, modifier: IVoxelModifier, updateCollider: bool) : void
    + MarkAffectedChunksDirty(minGrid: Vector3Int, maxGrid: Vector3Int) : void
    + UpdateAffectedChunks(minGrid: Vector3Int, maxGrid: Vector3Int, enableCollider: bool) : void
    + UpdateAllChunks(enableCollider: bool) : void
    + bool InvertAllNormals { set; }
    + bool EnableAllColliders { set; }
    + SetEmptyGrid() : void
    + AddShape(shape: EditShape, updateCollider: bool) : void
    + AddShapeWithMaxHeight(shape: EditShape, maxHeight: float, updateCollider: bool) : void
    + SubtractShape(shape: EditShape, updateCollider: bool) : void
    + SaveGridData(gridData: ScriptableObjectSaveData) : void
    + LoadGridData(gridData: ScriptableObjectSaveData, updateColliders: bool) : void
    + OnDrawGizmos() : void
    + DrawGridOutline() : void
}

class MarchingCubesView <<MonoBehaviour>>{
    - MeshFilter meshFilter
    - MeshCollider meshCollider
    - Vector3Int chunkStart
    - Vector3Int chunkSize
    - bool isDirty
    - bool invertedNormals
    + Initialize(start: Vector3Int, size: Vector3Int) : void
    + MarkDirty() : void
    + UpdateMeshIfDirty(model: MarchingCubesModel, enableCollider: bool) : void
    + UpdateMesh(meshData: MarchingCubesMeshData, enableCollider: bool) : void
    + UpdateMesh(vertices: List<Vector3>, triangles: List<int>, enableCollider: bool) : void
    + bool InvertedNormals { set; }
    + bool ColliderEnabled { set; }
    + bool IsWithinBounds(minGrid: Vector3Int, maxGrid: Vector3Int) : bool
    - GenerateChunkMesh(model: MarchingCubesModel) : MarchingCubesMeshData
    - InvertMeshTriangles() : void
    - OnDestroy() : void
}

class MarchingCubesModel {
    + float[,,] VoxelData
    + MarchingCubesModel(xResolution: int, yResolution: int, zResolution: int)
    + int ResolutionX { get; }
    + int ResolutionY { get; }
    + int ResolutionZ { get; }
    + void SetVoxel(x: int, y: int, z: int, value: float)
    + void AddVoxel(x: int, y: int, z: int, value: float)
    + void SubtractVoxel(x: int, y: int, z: int, value: float)
    + float GetVoxel(x: int, y: int, z: int)
    + float[,,] GetVoxelData()
    + float[] GetCubeWeights(x: int, y: int, z: int)
    - bool IsInGrid(x: int, y: int, z: int) : bool
}

class MarchingCubesMeshData {
    + List<Vector3> vertices
    + List<int> triangles
    - Dictionary<Vector3, int> vertexCache

    + int AddVertex(vertex: Vector3)
    + void AddTriangle(index1: int, index2: int, index3: int)
    + void Clear()
}

abstract class EditShape {
    - Matrix4x4 worldToLocalMatrix
    + void PrecomputeTransform(gridTransform: Transform)
    + float OptimizedDistance(worldPoint: Vector3)
    # abstract float DistanceOutsideIsPositive(localPoint: Vector3)
    + Vector3 Position { get; }
    + Vector3 Scale { get; }
    - Material linkedMaterial
    + Color Color { set; }
    + abstract (Vector3 minOffset, Vector3 maxOffset) GetLocalBoundingBox()
    + (Vector3 worldMin, Vector3 worldMax) GetWorldBoundingBox()
}
EditShape <|-- SphereShape : Example Implementation
EditShape <|-- CubeShape : Example Implementation

class MarchingCubeEditor <<EditorWindow>>{
    - MarchingCubesController linkedMarchingCubesController
    - ScriptableObjectSaveData linkedScriptableObjectSaveData
    - EditShape selectedShape
    - int gridResolutionX
    - int gridResolutionY
    - int gridResolutionZ
    - bool addingShape
    - bool limitMaxHeight
    - bool invertNormals
    - Vector3 originalShapePosition
    - Color additionColor
    - Color subtractionColor
    --
    + static void ShowWindow()
    + void OnGUI()
    + void InvertNormals(value: bool)
    + void LoadData()
    + void OnSceneGUI(sceneView: SceneView)
}

class ScriptableObjectSaveData <<ScriptableObject>>{
    - int resolutionX
    - int resolutionY
    - int resolutionZ
    - string packedData
    --
    + void SaveData(voxelValues: float[,,])
    + float[,,] LoadData()
}

MarchingCubeEditor ..> MarchingCubesController : "controls"
MarchingCubeEditor ..> EditShape : "uses"
MarchingCubeEditor ..> ScriptableObjectSaveData : "writes to and reads from"
MarchingCubesController --> MarchingCubesModel : "modifies"
MarchingCubesController --> MarchingCubesView : "controls 1...*"
MarchingCubesController --> EditShape : "uses"
MarchingCubesController --> ScriptableObjectSaveData : "serializes and deserializes"
MarchingCubesView --> MarchingCubesModel : "reads from"
MarchingCubesView --> MarchingCubesMeshData : "writes to"
MarchingCubesMeshData --> MarchingCubesView : "provides"
EditShape --> MarchingCubesController : "is operated on by"
MarchingCubesMeshData --> MarchingCubesModel : "visualizes"
ScriptableObjectSaveData --> MarchingCubesModel : "serializes and deserializes"

@enduml
